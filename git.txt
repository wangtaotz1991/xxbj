git结构：
工作区--写代码
git add
暂存区--临时存储
git commit
本地库--历史版本

Git和代码托管中心：
代码托管中心的任务--维护远程库
局域网--GitLab服务器
外网--Github 码云

本地库和远程库：
团队内部协作
跨团队协作

Git命令行操作
1.本地库初始化
命令：git init
注意：.git目录不要乱动乱改
2.设置签名
形式：
用户名：wangtao
Email地址：550115082@qq.com
命令：
项目级别/仓库级别:仅在当前本地库范围内有效
git config user.name wangtao
git config user.email 550115082@qq.com
系统用户级别：登录当前操作系统的用户范围
git config --global user.name wangtao
git config --global user.email 550115082@qq.com
优先级 就近原则 项目级别优先于系统级别 至少要有一个
3.基本操作
3.1状态查看:
git status
查看工作区、暂存区状态
3.2添加操作：
git add [file name]
将工作区的"新建/修改"添加到暂存区
3.3提交操作
git commit -m "commit message" [file name]
将暂存区的内容提交到本地库
3.4查看历史记录
git log 
多屏显示操作
空格向下翻页
b向上翻页
q退出
git log --pretty=oneline
git --oneline
git reflog
    HEAD@{移动到当前版本需要多少步}
3.5前进后退
	基于索引值操作
	git reset --hard [局部索引值]
	使用^符号 只能后退
	git reset --hard HEAD^    注：一个^表示后退一步，几个表示后退几步
	使用~符号 只能后退
	git reset --hard HEAD~n   注：表示后退n步
3.6reset三个参数对比
	--soft 仅仅在本地库移动HEAD指针
	--mixed 在本地库移动，重置暂存区
	--hard  在本地库移动，重置暂存区，重置工作区
3.7删除文件找回
	前提：删除前，文件存在时的状态提交到了本地库
	操作：git reset --hard[指针位置]
		删除操作已经提交到本地库：指针位置指向历史记录
		删除操作尚未提交到本地库：指针位置使用HEAD
3.8 比较文件差异	
	git diff [文件名]
	将工作区的文件和暂存区进行比较
	git diff [本地库中历史版本] [文件名]
	将工作区中的文件和本地库历史记录比较
4.3 分支操作
	创建分支
	git branch [分支名]
	查看分支
	git branch -v
	切换分支
	git checkout [分支名]
	合并分支
		第一步：切换到接受修改的分支上（被合并，增加新内容）
				git checkout [被合并的分支名]
		第二步： 执行merge命令
				git merge [有新内容分支名]
	解决冲突：
		第一步： 编辑文件，删除特殊符号
		第二步： 把文件修改到满意的程度，保存退出
		第三步： git add [文件名]
		第四步： git commit -m "日志信息"
					注意：此时commit一定不能带具体的文件名
GitHub
1. 远程库地址及别名
	git remote -v 查看当前所有远程地址别名
	git remote add [别名] [远程地址]
2.推送
	git push [别名] [分支名]
3.克隆
	命令 git clone [远程地址]
	完整的把远程库下载到本地
	创建远程地址别名
	初始化本地库
注：同一台电脑切换github账号 进入凭据管理器删除掉github账号信息	 测试另一个账号提交
修改测试111


账号:2018988360@qq.com  wangtao91_2
111
222
